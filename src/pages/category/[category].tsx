import Head from 'next/head';
import { GetServerSideProps, GetServerSidePropsContext } from 'next';
import { FC } from 'react';
import qs from 'qs';
import { capitalizeFirstLetter, makeCategory } from 'utils';
import { fetchPosts, fetchCategories } from '../../http';
import { AxiosResponse } from 'axios';
import Tabs from 'components/Tabs/Tabs';
import PostCard from 'components/PostCard/PostCard';

interface IPropType {
  categories: {
    items: ICategory[];
  };
  dataPost: {
    items: IArticle[];
  };
  slug: string;
}

const Category: FC<IPropType> = ({ categories, dataPost, slug }) => {
  const formattedCategory = () => {
    return capitalizeFirstLetter(makeCategory(slug));
  };

  return (
    <>
      <Head>
        <title>SL PORTFOLIO - Блог на тему: {formattedCategory()}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <Tabs categories={categories.items} />
      <div className="columns">
        {dataPost.items.length > 0 ? (
          dataPost.items.map((post) => {
            return <PostCard key={post.id} post={post.attributes} />;
          })
        ) : (
          <div className="no-posts animate">В этой каегории нет постов</div>
        )}
      </div>
    </>
  );
};

export default Category;

export const getServerSideProps: GetServerSideProps = async ({
  query,
}: GetServerSidePropsContext) => {
  const options: IQueryOptions = {
    populate: ['category', 'image'],
    filters: {
      category: {
        slug: query.category,
      },
    },
  };

  const queryString = qs.stringify(options);

  console.log(queryString);

  const { data }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchPosts(
    queryString
  );

  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> =
    await fetchCategories();

  return {
    props: {
      categories: {
        items: categories.data,
      },
      dataPost: {
        items: data.data,
      },
      slug: query.category,
    },
  };
};
